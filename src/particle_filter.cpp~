/*
 * particle_filter.cpp
 *
 *  Created on: Dec 12, 2016
 *      Author: Tiffany Huang
 */

#include <random>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <math.h> 
#include <iostream>
#include <sstream>
#include <string>
#include <iterator>

#include "particle_filter.h"

using namespace std;
static default_random_engine gen;

void ParticleFilter::init(double x, double y, double theta, double std[]) {
	// TODO: Set the number of particles. Initialize all particles to first position (based on estimates of 
	//   x, y, theta and their uncertainties from GPS) and all weights to 1. 
	// Add random Gaussian noise to each particle.
	// NOTE: Consult particle_filter.h for more information about this method (and others in this file).
	num_particles = 100;

	double std_x, std_y, std_theta; // Standard deviations for x, y, and theta

	std_x = std[0];
	std_y = std[1];
	std_theta = std[2];
	 
	normal_distribution<double> normalize_x(0, std_x);	
	normal_distribution<double> normalize_y(0, std_y);
	normal_distribution<double> normalize_theta(0, std_theta);

	for (int i=0; i<num_particles; i++){
		Particle p;
		p.id = i;
		p.x = x;
		p.y = y;
		p.theta = theta;
		p.weight = 1.0;
	
		p.x += normalize_x(gen);
		p.y += normalize_y(gen);
		p.theta += normalize_theta(gen);

		particles.push_back(p);
	}

	is_initialized = true;

}

void ParticleFilter::prediction(double delta_t, double std_pos[], double velocity, double yaw_rate) {
	// TODO: Add measurements to each particle and add random Gaussian noise.
	// NOTE: When adding noise you may find std::normal_distribution and std::default_random_engine useful.
	//  http://en.cppreference.com/w/cpp/numeric/random/normal_distribution
	//  http://www.cplusplus.com/reference/random/default_random_engine/
	//Normalizing
	normal_distribution<double> normalize_x(0, std_pos[0]);	
	normal_distribution<double> normalize_y(0, std_pos[1]);
	normal_distribution<double> normalize_theta(0, std_pos[2]);

	for (int i=0; i<num_particles; i++){
		if (fabs(yaw_rate) < 0.00001) {  
	      		particles[i].x += velocity * delta_t * cos(particles[i].theta);
	      		particles[i].y += velocity * delta_t * sin(particles[i].theta);
	    	}
		else{ 
			particles[i].x += velocity/yaw_rate*(sin(particles[i].theta + yaw_rate*delta_t) - sin(particles[i].theta));
			particles[i].y += velocity/yaw_rate*(cos(particles[i].theta) - cos(particles[i].theta + yaw_rate*delta_t));
			particles[i].theta += yaw_rate*delta_t;
		}

		//Adding noise to the predictions
		particles[i].x += normalize_x(gen);
		particles[i].y += normalize_y(gen);
		particles[i].theta += normalize_theta(gen);
	}

}

void ParticleFilter::dataAssociation(std::vector<LandmarkObs> predicted, std::vector<LandmarkObs>& observations) {
	// TODO: Find the predicted measurement that is closest to each observed measurement and assign the 
	//   observed measurement to this particular landmark.
	// NOTE: this method will NOT be called by the grading code. But you will probably find it useful to 
	//   implement this method and use it as a helper during the updateWeights phase.
	double ref_dist = numeric_limits<double>::max();
	double distance;
	int observation_id = -1;
	for (unsigned int i=0; i<observations.size(); i++){
		for (unsigned int j=0; j<predicted.size(); j++){
			distance = dist(observations[i].x, observations[i].y, predicted[j].x, predicted[j].y);

			if (distance < ref_dist){
				ref_dist = distance;
				observation_id = predicted[j].id;				
			}		  	
		}
		observations[i].id = observation_id;		
	}

}

void ParticleFilter::updateWeights(double sensor_range, double std_landmark[], 
		std::vector<LandmarkObs> observations, Map map_landmarks) {
	// TODO: Update the weights of each particle using a mult-variate Gaussian distribution. You can read
	//   more about this distribution here: https://en.wikipedia.org/wiki/Multivariate_normal_distribution
	// NOTE: The observations are given in the VEHICLE'S coordinate system. Your particles are located
	//   according to the MAP'S coordinate system. You will need to transform between the two systems.
	//   Keep in mind that this transformation requires both rotation AND translation (but no scaling).
	//   The following is a good resource for the theory:
	//   https://www.willamette.edu/~gorr/classes/GeneralGraphics/Transforms/transforms2d.htm
	//   and the following is a good resource for the actual equation to implement (look at equation 
	//   3.33
	//   http://planning.cs.uiuc.edu/node99.html
	float map_landmark_x;
	float map_landmark_y;
	int map_landmark_id;
	for (int i=0; i<num_particles; i++){
		vector<LandmarkObs> predictions;
		for (unsigned int j=0; j<map_landmarks.landmark_list.size(); j++){
			map_landmark_x = map_landmarks.landmark_list[j].x_f;
			map_landmark_y = map_landmarks.landmark_list[j].y_f;
			map_landmark_id = map_landmarks.landmark_list[j].id_i;

			if(fabs(particles[i].x - map_landmark_x) <= sensor_range && fabs(particles[i].y - map_landmark_y) <= sensor_range){
				predictions.push_back(LandmarkObs{map_landmark_id, map_landmark_x, map_landmark_y});
			}		
		}

		vector<LandmarkObs> transformed_obs;

		double trans_obs_x, trans_obs_y, trans_obs_id;
		for (unsigned int j=0; j<observations.size(); j++){
			trans_obs_x = cos(particles[i].theta)*observations[j].x - sin(particles[i].theta)*observations[j].y + particles[i].x;
			trans_obs_y = sin(particles[i].theta)*observations[j].x + cos(particles[i].theta)*observations[j].y + particles[i].y;
			transformed_obs.push_back(LandmarkObs{ observations[j].id, trans_obs_x, trans_obs_y });
		}

		dataAssociation(predictions,transformed_obs);

		// reinit weight
        	particles[i].weight = 1.0;


		for (unsigned int m=0; m<transformed_obs.size(); m++){
			double obx = transformed_obs[m].x;
			double oby = transformed_obs[m].y;
	
			double px;
			double py;

			for(unsigned int k=0; k<predictions.size(); k++){
				if(predictions[k].id == transformed_obs[m].id){
					px = predictions[k].x;
					py = predictions[k].y;
				}
			}

			double sx = std_landmark[0];
		      	double sy = std_landmark[1];
				 
			
			particles[i].weight *= ( 1/(2*M_PI*sx*sy)) * exp( -( pow(px-obx,2)/(2*pow(sx, 2)) + (pow(py-oby,2)/(2*pow(sy, 2))) ) );			
		}
	}
}


void ParticleFilter::resample() {
	// TODO: Resample particles with replacement with probability proportional to their weight. 
	// NOTE: You may find std::discrete_distribution helpful here.
	//   http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution
	  vector<Particle> new_particles;

	  // get all of the current weights
	  vector<double> weights;
	  for (int i = 0; i < num_particles; i++) {
	    weights.push_back(particles[i].weight);
	  }

	  // generate random starting index for resampling wheel
	  uniform_int_distribution<int> uniintdist(0, num_particles-1);
	  auto index = uniintdist(gen);

	  // get max weight
	  double max_weight = *max_element(weights.begin(), weights.end());

	  // uniform random distribution [0.0, max_weight)
	  uniform_real_distribution<double> unirealdist(0.0, max_weight);

	  double beta = 0.0;

	  // spin the resample wheel!
	  for (int i = 0; i < num_particles; i++) {
	    beta += unirealdist(gen) * 2.0;
	    while (beta > weights[index]) {
	      beta -= weights[index];
	      index = (index + 1) % num_particles;
	    }
	    new_particles.push_back(particles[index]);
	  }

	  particles = new_particles;	
}

Particle ParticleFilter::SetAssociations(Particle particle, std::vector<int> associations, std::vector<double> sense_x, std::vector<double> sense_y)
{
	//particle: the particle to assign each listed association, and association's (x,y) world coordinates mapping to
	// associations: The landmark id that goes along with each listed association
	// sense_x: the associations x mapping already converted to world coordinates
	// sense_y: the associations y mapping already converted to world coordinates

	//Clear the previous associations
	particle.associations.clear();
	particle.sense_x.clear();
	particle.sense_y.clear();

	particle.associations= associations;
 	particle.sense_x = sense_x;
 	particle.sense_y = sense_y;

 	return particle;
}

string ParticleFilter::getAssociations(Particle best)
{
	vector<int> v = best.associations;
	stringstream ss;
    copy( v.begin(), v.end(), ostream_iterator<int>(ss, " "));
    string s = ss.str();
    s = s.substr(0, s.length()-1);  // get rid of the trailing space
    return s;
}
string ParticleFilter::getSenseX(Particle best)
{
	vector<double> v = best.sense_x;
	stringstream ss;
    copy( v.begin(), v.end(), ostream_iterator<float>(ss, " "));
    string s = ss.str();
    s = s.substr(0, s.length()-1);  // get rid of the trailing space
    return s;
}
string ParticleFilter::getSenseY(Particle best)
{
	vector<double> v = best.sense_y;
	stringstream ss;
    copy( v.begin(), v.end(), ostream_iterator<float>(ss, " "));
    string s = ss.str();
    s = s.substr(0, s.length()-1);  // get rid of the trailing space
    return s;
}
